
.. _software_design:

===============
Software Design
===============

.. _class_diagram:

Class Diagram
=============

.. uml generated by `pyreverse mlx.warnings -o plantuml`
.. uml::

    @startuml
    set namespaceSeparator none
    class "BugFinderChecker" as src.mlx.warnings.polyspace_checker.BugFinderChecker {
    checkers : list
    count : int
    name : str
    tsv_file
    parse_config(config)
    return_count()
    }
    class "CodeProverChecker" as src.mlx.warnings.polyspace_checker.CodeProverChecker {
    checkers : list
    count : int
    name : str
    tsv_file
    parse_config(config)
    return_count()
    }
    class "CoverityChecker" as src.mlx.warnings.regex_checker.CoverityChecker {
    CLASSIFICATION : str
    count
    name : str
    pattern
    check(content)
    }
    class "DoxyChecker" as src.mlx.warnings.regex_checker.DoxyChecker {
    name : str
    pattern
    }
    class "JUnitChecker" as src.mlx.warnings.junit_checker.JUnitChecker {
    count
    name : str
    check(content)
    prepare_tree(root_input)
    }
    class "PolyspaceChecker" as src.mlx.warnings.polyspace_checker.PolyspaceChecker {
    checkers : dict
    counted_warnings
    check(content)
    get_maximum(name)
    get_minimum(name)
    return_check_limits()
    set_maximum(maximum)
    set_minimum(minimum, name)
    }
    class "RegexChecker" as src.mlx.warnings.regex_checker.RegexChecker {
    SEVERITY_MAP : dict
    count
    name : str
    pattern : NoneType
    add_code_quality_finding(match)
    check(content)
    }
    class "RobotChecker" as src.mlx.warnings.robot_checker.RobotChecker {
    checkers : list
    count : int
    counted_warnings
    name : str
    check(content)
    get_maximum()
    get_minimum()
    parse_config(config)
    return_check_limits()
    return_count()
    set_maximum(maximum)
    set_minimum(minimum)
    }
    class "RobotSuiteChecker" as src.mlx.warnings.robot_checker.RobotSuiteChecker {
    check_suite_name : bool
    is_valid_suite_name : bool
    name
    check(content)
    return_count()
    }
    class "SphinxChecker" as src.mlx.warnings.regex_checker.SphinxChecker {
    name : str
    pattern
    sphinx_deprecation_regex : str
    sphinx_deprecation_regex_in_match : str
    include_sphinx_deprecation()
    }
    class "WarningsChecker" as src.mlx.warnings.warnings_checker.WarningsChecker {
    count : int
    counted_warnings
    cq_default_path : str
    cq_description_template
    cq_enabled : bool
    cq_findings : list
    exclude_patterns : list
    include_patterns : list
    name : str
    verbose : bool
    warn_max : int
    warn_min : int
    add_patterns(regexes, pattern_container)
    {abstract}check(content)
    get_maximum()
    get_minimum()
    parse_config(config)
    print_when_verbose(message)
    return_check_limits()
    return_count()
    set_maximum(maximum)
    set_minimum(minimum)
    }
    class "<color:red>WarningsConfigError</color>" as src.mlx.warnings.exceptions.WarningsConfigError {
    }
    class "WarningsPlugin" as src.mlx.warnings.warnings.WarningsPlugin {
    activated_checkers : dict
    count : int
    cq_enabled : bool
    printout : bool
    public_checkers : list
    verbose : bool
    warn_max : int
    warn_min : int
    activate_checker(checker)
    activate_checker_name(name)
    check(content)
    config_parser(config)
    get_checker(name)
    return_check_limits(name)
    return_count(name)
    set_maximum(maximum)
    set_minimum(minimum)
    toggle_printout(printout)
    write_code_quality_report(out_file)
    write_counted_warnings(out_file)
    }
    class "XMLRunnerChecker" as src.mlx.warnings.regex_checker.XMLRunnerChecker {
    name : str
    pattern
    }
    src.mlx.warnings.junit_checker.JUnitChecker --|> src.mlx.warnings.warnings_checker.WarningsChecker
    src.mlx.warnings.polyspace_checker.BugFinderChecker --|> src.mlx.warnings.polyspace_checker.PolyspaceChecker
    src.mlx.warnings.polyspace_checker.CodeProverChecker --|> src.mlx.warnings.polyspace_checker.PolyspaceChecker
    src.mlx.warnings.polyspace_checker.PolyspaceChecker --|> src.mlx.warnings.warnings_checker.WarningsChecker
    src.mlx.warnings.regex_checker.CoverityChecker --|> src.mlx.warnings.regex_checker.RegexChecker
    src.mlx.warnings.regex_checker.DoxyChecker --|> src.mlx.warnings.regex_checker.RegexChecker
    src.mlx.warnings.regex_checker.RegexChecker --|> src.mlx.warnings.warnings_checker.WarningsChecker
    src.mlx.warnings.regex_checker.SphinxChecker --|> src.mlx.warnings.regex_checker.RegexChecker
    src.mlx.warnings.regex_checker.XMLRunnerChecker --|> src.mlx.warnings.regex_checker.RegexChecker
    src.mlx.warnings.robot_checker.RobotChecker --|> src.mlx.warnings.warnings_checker.WarningsChecker
    src.mlx.warnings.robot_checker.RobotSuiteChecker --|> src.mlx.warnings.junit_checker.JUnitChecker
    @enduml


String Handling
===============

Convention is to use plain python strings everywhere. Where needed the strings can be converted to anything else.

Example: junitparser expects byte array objects, so we encode our string right before passing it to junitparser.

Instrument Module
=================

.. automodule:: mlx.warnings
    :members:
    :undoc-members:
    :show-inheritance:
